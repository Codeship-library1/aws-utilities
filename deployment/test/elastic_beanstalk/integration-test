#!/bin/bash

function debug() { echo -e "\033[0;37m$*\033[0m"; }
function info() { echo -e "\033[0;36m$*\033[0m"; }
function error() { >&2  echo -e "\033[0;31m$*\033[0m"; }
function fail() { error ${1}; exit ${2:-1}; }

function cleanup() {
  info "Collecting debug information for application ${APPLICATION_NAME}, environment ${ENVIRONMENT_NAME}"
  aws elasticbeanstalk describe-environments \
    --application-name "${APPLICATION_NAME}" \
    --environment-names "${ENVIRONMENT_NAME}"

  info "Terminate Elastic Beanstalk environment called ${ENVIRONMENT_NAME}"
  aws elasticbeanstalk terminate-environment \
    --environment-name ${ENVIRONMENT_NAME}

  info "Delete Elastic Beanstalk application named ${APPLICATION_NAME}"
  aws elasticbeanstalk delete-application \
    --terminate-env-by-force \
    --application-name ${APPLICATION_NAME}
}
trap cleanup EXIT

APPLICATION_NAME="aws-utilities-eb-$(date +%s)"
ENVIRONMENT_NAME="env-$(date +%s)"
S3_BUCKET="elasticbeanstalkcodeupload"

set -eo pipefail

# switch to the top level directory
dir="$( cd "$( dirname "${BASH_SOURCE[0]}" )" && pwd )"
cd "${dir}/../.."

# load helper functions to abstract some calls to the AWS CLI
source ./scripts/elastic_beanstalk_environment_update.sh

info "Create Elastic Beanstalk application named ${APPLICATION_NAME}"
aws elasticbeanstalk create-application \
  --application-name "${APPLICATION_NAME}"

info "Create Elastic Beanstalk environment called ${ENVIRONMENT_NAME}"
aws elasticbeanstalk create-environment \
  --application-name "${APPLICATION_NAME}" \
  --environment-name "${ENVIRONMENT_NAME}" \
  --solution-stack-name "64bit Amazon Linux 2017.09 v2.8.0 running Docker 17.06.2-ce"

info "Waiting for environment to start"
while [ "$(environment_status)" != "Ready" ] ; do
  sleep 10
  echo "."
done

info "Creating deployment assets"
mkdir -p ./tmp/deployment
cp test/elastic_beanstalk/Dockerfile ./tmp/deployment
echo "${CI_COMMIT_ID}" > ./tmp/deployment/index.html

codeship_aws eb_deploy \
  "/deploy/tmp/deployment" \
  "${APPLICATION_NAME}" \
  "${ENVIRONMENT_NAME}" \
  "${S3_BUCKET}"

info "Checking Environment if deployment matches ci commit hash"
deployed_commit_id=`curl -s $(environment_cname)`

if [ "${deployed_commit_id}" == "${CI_COMMIT_ID}" ]; then
  info "Matching commit hashes ${CI_COMMIT_ID}, deployment successful"
else
  error "Commit Hashes did not match:"
  error "CI_COMMIT_ID: ${CI_COMMIT_ID}"
  error "DEPLOYED: ${deployed_commit_id}"
  exit 1
fi
